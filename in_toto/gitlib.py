import os
import sys
import six

def _int(b):
  """Helper to convert bytes to integer representation in Python2. Python3
  does this per default. """
  if six.PY2:
    return ord(b)
  return b


def gather_stats(content):
  """
  Look for certain characters in the passed bytes array (content) to gather
  statistics that can be used to detect the file type. Port of git's
  `gather_stats`.
  https://github.com/git/git/blob/master/convert.c#L46

  """
  idx = nul = lonecr = lonelf = crlf = printable = nonprintable = 0

  size = len(content)
  while idx < size:
    if (idx + 1 < size and
        _int(content[idx]) == 13 and
        _int(content[idx + 1]) == 10): # CRLF (\r\n)
      crlf = crlf + 1
      idx = idx + 1

    elif _int(content[idx]) == 13: # crarriage return (\r)
      lonecr = lonecr + 1

    elif _int(content[idx]) == 10: # line feed (\n)
      lonelf = lonelf + 1

    elif _int(content[idx]) == 127: # delete (\x7F)
      nonprintable = nonprintable + 1

    elif _int(content[idx]) == 0: # null (\x00)
      nul = nul + 1

    # backspace (\b), horizontal tab (\t), escape (\x1b, form feed (\f)
    elif _int(content[idx]) in [8, 9, 27, 12]:
      printable = printable + 1

    # Other ASCII characters below 32 (excluding above)
    elif _int(content[idx]) < 32:
      nonprintable = nonprintable + 1

    # Everything else
    else:
      printable = printable + 1

     # If file ends with EOF then don't count this EOF as non-printable
    if (size >= 1 and _int(content[-1]) == 26):
      nonprintable = nonprintable - 1

    idx = idx + 1

  return {
    "nul": nul,
    "lonecr": lonecr,
    "lonelf": lonelf,
    "crlf": crlf,
    "printable": printable,
    "nonprintable": nonprintable
  }


def is_binary(stats):
  """Heuristics to detect if a file is binary based on stats generated by
  looking for certain characters in a file. Port of git's `convert_is_binary`.
  https://github.com/git/git/blob/master/convert.c#L95

  """
  if stats["lonecr"]:
    return True

  if stats["nul"]:
    return True

  if ((stats["printable"] >> 7) < stats["nonprintable"]):
    # NOTE: x >> y is roughly equivalent to x / y**2 (with different rounding)
    return True

  return False



def main():
  if len(sys.argv) < 2:
    raise Exception("Supply path")

  path = sys.argv[1]

  if not os.path.isfile(path):
    raise Exception("Path is not a file")

  with open(path, "rb") as file_object:
    # FIXME: Do we need to read entire file, should we read it chunk by chunk?
    content = file_object.read()

    # Would git convert line endings in this file?
    stats = gather_stats(content)
    if is_binary(stats):
      print(path, "binary")
      sys.exit(0)

    else:
      print(path, "text")
      sys.exit(1)


if __name__ == "__main__":
  main()

